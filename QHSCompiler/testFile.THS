#makeNextOrderCodeStackProof
#enterCodeStack

#makeNextOrderCodeStackProof
#exitCodeStack

#makeNextOrderCodeStackProof
#pushNextOrderToCodeStack

#makeNextOrderCodeStackProof
#escapeNextFromOrderQueue

#makeNextOrderCommentProof
#exitComment


#enterTypeStack
#exitTypeStack

#enterTypeStack
#exitTypeStack

#enterCodeStack
#enterTypeStack
#exitCodeStack

#assignNextIdentifier
[


#enterTypeStack
#exitTypeStack

#enterTypeStack
#exitTypeStack

#enterCodeStack
#exitTypeStack
#exitCodeStack

#assignNextIdentifier
]

[ ] [ ]

#enterCodeStack
#pushNextOrderToCodeStack
#enterCodeStack
#exitCodeStack

#assignNextIdentifier
{

#makeNextOrderCodeStackProof {


[ ] [ ]

#enterCodeStack
#pushNextOrderToCodeStack
#exitCodeStack
#exitCodeStack

#assignNextIdentifier
}

#makeNextOrderCodeStackProof }


[ ] [ ]  { #assignNextIdentifier } #assignNextIdentifier ->

[ ] [ ] { #enterComment } -> /*
[ ] [ ] { #exitComment } -> */

#makeNextOrderCommentProof */

[ ] [ ] {"
" #clearOrderQueue }  -> ;

[ ] [ ] { [ ] [ ] -> } -> >> ;

{ #debug } >> debug ;

/*
debug
debug */


{ #executeFromOrderQueue } >> $ ;
{ #escapeNextFromOrderQueue } >> \ ;
{ #fromPrimaryToSecondaryOrderQueue } >> pTs ;
{ #fromSecondaryToPrimaryOrderQueue } >> sTp ;

#makeNextOrderCodeStackProof \

{"rax"} >> rax ;
{"$5"} >> 5 ;



{ "mov " $ ", " $ } >> mov ;

{ rax 5 } mov ;

/* swapping */

{ 
    pTs
    sTp
} >> swap ;

{ "1" "2" } swap

$ $