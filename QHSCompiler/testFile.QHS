#makeNextOrderOrderQueueProof
#enterOrderQueue

#makeNextOrderOrderQueueProof
#exitOrderQueue

#makeNextOrderOrderQueueProof
#pushNextOrderToOrderQueue

#makeNextOrderCommentProof
#exitComment


#enterTypeStack
#exitTypeStack

#enterTypeStack
#exitTypeStack

#pushNewOrderQueue
#enterOrderQueue
#enterTypeStack
#exitOrderQueue

#assignNextIdentifier
[


#enterTypeStack
#exitTypeStack

#enterTypeStack
#exitTypeStack

#pushNewOrderQueue
#enterOrderQueue
#exitTypeStack
#exitOrderQueue

#assignNextIdentifier
]

[ ] [ ]

#pushNewOrderQueue
#enterOrderQueue
#pushNewOrderQueue
#pushNextOrderToOrderQueue
#enterOrderQueue
#exitOrderQueue

#assignNextIdentifier
{

#makeNextOrderOrderQueueProof {


[ ] [ ]

#pushNewOrderQueue
#enterOrderQueue
#pushNextOrderToOrderQueue
#exitOrderQueue
#exitOrderQueue

#assignNextIdentifier
}

#makeNextOrderOrderQueueProof }

[ ] [ ] { #assignNextIdentifierToOneOrder } #assignNextIdentifier ->
[ ] [ ] { #assignNextIdentifier } #assignNextIdentifier >>

[ ] [ ] { #pushNextOrderToOrderQueue #enterOrderQueue } >> (
#makeNextOrderOrderQueueProof (
[ ] [ ] { #pushNextOrderToOrderQueue #exitOrderQueue } >> )
#makeNextOrderOrderQueueProof )


[ ] [ ] { #enterComment } >> /*
[ ] [ ] { #exitComment } >> */
#makeNextOrderCommentProof */

[ ] [ ] { "
" #clearOrderQueue }  >> ;

"aaa
aaa"

[ ] [ ] { #debug } >> debug ;

/*
debug
debug */


[ ] [ ] { #putInFrontFromOrderQueue } >> $ ;


[ ] [ ] {"rax"} >> rax ;
[ ] [ ] {"$5"} >> 5 ;

[ ] [ ] { "mov " $ ", " $ } >> mov ;

( rax 5 ) mov ;

/* swapping */


[ ] [ ] 
{ 
    [ ] [ ] -> second
    ( second )
} >> swap ;

( "1" "2" ) swap

$ $

