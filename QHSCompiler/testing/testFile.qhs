#enterOrderQueue
{
#orderEnqueue
#enterOrderQueue
#exitOrderQueue

#assign

#enterOrderQueue
{
#exitOrderQueue
#makeOrderQueueProof


#enterOrderQueue
}
#orderEnqueue
#exitOrderQueue
#exitOrderQueue

#assign

#enterOrderQueue
}
#exitOrderQueue
#makeOrderQueueProof

{ -> #assignToOne } #assign
{ >> #assign } #assign


{ /* #orderEnqueue #enterComment } >>
{ /* } #makeOrderQueueProof
{ */ #orderEnqueue #exitComment } >>
{ */ } #makeCommentProof
{ */ } #makeOrderQueueProof

{ ; "
" #clearOrderQueue }  >>

{ debug #debug } >> ;

/*
reeeee
debug */


/* { $ #putInFrontFromOrderQueue } >> $ ; */

{ @ } { @ #orderQueueTop } >> ;

{ ! } { #orderEnqueue #force } >> ;
{ ! } #makeOrderQueueProof ;

{ lateArg>> } {
    /* result in #orderEnqueue ! in order queue */
    { #orderEnqueue #orderEnqueue #orderEnqueue ! @ } >> 
} >> ;
{ lateArg>> } #makeOrderQueueProof ;

/* { >> #executeNextInEncounterPhase } >> >>executeOnce ; */

{ start }
{
    resetRBPoffset ;
    "global _start" ;
    "_start:" ;
    "mov rbp, rsp" ;
} >> ;

/* ------------------ data handling ------------------ */
/* types */
{ int } { "4" } >> ;
{ intVar } { var ! int } >> ;

{ bool } { "1" } >> ;
{ boolVar } { var ! bool } >> ;

{ getSizeSpecifier }
{
    #orderFrontEnqueue size ->

    #pushEnv

    { "byte" } >> 1
    { "word" } >> 2
    { "dword" } >> 4
    { "qword" } >> 8

    { #orderEnqueue ! size } #literalToIdentifier

    #popEnv

} >> ;

{ getRegisterA }
{
    #orderFrontEnqueue size ->

    #pushEnv

    { 1 "al" } >>
    { 2 "ax" } >>
    { 4 "eax" } >>
    { 8 "rax" } >>

    { #orderEnqueue ! size } #literalToIdentifier

    #popEnv    

} >> ;

{ getDefineSpecifier }
{
    #orderFrontEnqueue size ->

    #pushEnv

    { 1 "db" } >>
    { 2 "dw" } >>
    { 4 "dd" } >>
    { 8 "dq" } >>

    { #orderEnqueue ! size } #literalToIdentifier

    #popEnv

} >> ;

/* ------------------ variables ------------------ */
{ varFromDefineCode }
{
    #orderFrontEnqueue defineCode -> ;
    
    { name } lateArg>> ;

    /* assigns what is stored in name to the direct code of what is stored in name */
    { #orderEnqueue ! name }
    { #orderEnqueue ! #orderToLiteralCode #orderEnqueue ! name } >> ;

    name ": " defineCode ; 
} >> ;

{ roDataVar }
{
    { size } lateArg>> ;
    { name } lateArg>> ;
    { value } lateArg>> ;

    { defineSpecifier }
    { { #orderEnqueue ! size } getDefineSpecifier } >> ;

    /* assigns whast is stored in name to the direct code of what is stored in name */
    { #orderEnqueue ! name }
    { #orderEnqueue ! #orderToLiteralCode #orderEnqueue ! name } >> ;

    name ": " defineSpecifier " " value ;
} >> ;

{ dataVar }
{
    { size } lateArg>> ;
    { name } lateArg>> ;
    { value } lateArg>> ;

    { { #orderEnqueue ! size } getDefineSpecifier } >> defineSpecifier ;

    /* assigns whast is stored in name to the direct code of what is stored in name */
    { #orderEnqueue ! name }
    { #orderEnqueue ! #orderToLiteralCode #orderEnqueue ! name } >> ;

    name ": " defineSpecifier " " value ;
} >> ;

{ bssVar }
{
    { size } lateArg>> ;
    { name } lateArg>> ;

    /* assigns what is stored in name to the direct code of what is stored in name */
    { #orderEnqueue ! name }
    { #orderEnqueue ! #orderToLiteralCode #orderEnqueue ! name } >> ;

    name ": resb " size ;

} >> ;

{ localVar }
{
    { size } lateArg>> ;
    { name } lateArg>> ;
    { value } lateArg>> ;

    { register } { { #orderEnqueue ! size } getRegisterA } >> ;
    { sizeSpecifier } { { #orderEnqueue ! size } getSizeSpecifier } >> ;

    { "rbpOffset" #orderEnqueue ! size } #changeIntGeneratorVar
    { currentRBPoffset } { "rbpOffset" #orderEnqueue ! #getIntGeneratorVar } >> ;
    { newRBPvar } { "rbp-" #orderEnqueue ! currentRBPoffset } >> ;
    { address } { "[" #orderEnqueue ! newRBPvar "]" } >> ;

    "sub rsp, " size ;
    "mov " register ", " value ;
    "mov " address ", " register ;

    { #orderEnqueue ! name }
    { #orderEnqueue ! sizeSpecifier " " #orderEnqueue ! address } >> ;
} >> ;

/* ------------------ functions  ------------------ */
{ resetRBPoffset } { { "rbpOffset" "0" } #setIntGeneratorVar } >> ;

{ funcBodyPreamble }
{
    "mov rbp, rsp" ;
} >> ;

{ funcCallPreamble }
{
    "push rbp" ;
} >> ;

{ funcCallPostamble }
{
    "pop rbp" ;
} >> ;

{ func }
{
    { name } lateArg>> ;

    /* assigns what is stored in name to the direct code of what is stored in name */
    { directFuncName }
    { #orderEnqueue ! #orderToLiteralCode #orderEnqueue ! name } >> ;

    /* assign call to the identifer in latearg name */
    { #orderEnqueue ! name }
    { 
        ! funcCallPreamble ;
        "call " directFuncName ;
        ! funcCallPostamble ;
    } >> ;

    resetRBPoffset ;

    directFuncName ":" ;

    funcBodyPreamble ;

} >> ;


{ return }
{
    "mov rsp, rbp" ;
    "ret" ;
} >> ;

/* ------------------ sections ------------------ */
{ rodata }
{ 
    "section .rodata" ; 
    { var roDataVar } >> ;
} >> ;

{ data }
{ 
    "section .data" ; 
    { var dataVar } >> ;
} >> ;

{ bss }
{ 
    "section .bss" ;
    { var bssVar } >> ;
} >> ;

{ text }
{
    "section .text"
    { var localVar } >> ;
} >> ;

/* ------------------ syscalls ------------------ */
{ exit }
{
    "mov rax, 60" ;
    "mov rdi, 0" ;
    "syscall" ;
} >> ;


{ rawPrint }
{
    #orderFrontEnqueue message ->
    #orderFrontEnqueue messageLength -> 

    "mov rax, 1" ;
    "mov rdi, 1" ;
    "mov rsi, " message ;
    "mov rdx, " messageLength ;
    "syscall" ;
} >> ;

{ print }
{
    #orderFrontEnqueue message ->
    #orderFrontEnqueue length -> 

    { register }
    { { #orderEnqueue ! length } getRegisterA } >> ;

    "sub rsp, " length ;
    "mov " register ", " message ;
    "mov [rsp], " register ;

    { "rsp " length } rawPrint ;

    "add rsp, " length ;
} >> ;

{ println }
{
    print ;

    { "0xa" "1" } print ;

} >> ;


/* ------------------ actually coding ------------------ */

/* rodata */
rodata ;

{ "db 'moin', 0xa" } varFromDefineCode wordToGuess ;

{ "equ $ - wordToGuess" } varFromDefineCode wordLength ;

/* data */
data ;

intVar testDataInt "67" ;

/* bss */
bss ;

intVar testBssInt ;

/* text */
text ;

/* functions */

func Hello ;

intVar a "68" ;
{ a ! int { println ;

return ;

/* start */
start ;


{ wordToGuess wordLength } rawPrint ;

{ { wordToGuess wordLength } rawPrint } >> printWord ;

printWord ;

intVar num "65" ; 
intVar num2 "66" ;

{ num ! int } println ;
{ num2 ! int } println ;

{ testDataInt ! int } rawPrint ;

Hello ;

exit ;



