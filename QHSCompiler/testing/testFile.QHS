#makeNextOrderOrderQueueProof
#enterOrderQueue

#makeNextOrderOrderQueueProof
#exitOrderQueue

#makeNextOrderOrderQueueProof
#pushNextOrderToOrderQueue

#makeNextOrderCommentProof
#exitComment


#enterTypeStack
#exitTypeStack

#enterTypeStack
#exitTypeStack

#pushNewOrderQueue
#enterOrderQueue
#enterTypeStack
#exitOrderQueue

#assignNextIdentifier
[


#enterTypeStack
#exitTypeStack

#enterTypeStack
#exitTypeStack

#pushNewOrderQueue
#enterOrderQueue
#exitTypeStack
#exitOrderQueue

#assignNextIdentifier
]

[ ] [ ]

#pushNewOrderQueue
#enterOrderQueue
#pushNewOrderQueue
#pushNextOrderToOrderQueue
#enterOrderQueue
#exitOrderQueue

#assignNextIdentifier
{

#makeNextOrderOrderQueueProof {


[ ] [ ]

#pushNewOrderQueue
#enterOrderQueue
#pushNextOrderToOrderQueue
#exitOrderQueue
#exitOrderQueue

#assignNextIdentifier
}

#makeNextOrderOrderQueueProof }

[ ] [ ] { #assignNextIdentifierToOneOrder } #assignNextIdentifier ->
[ ] [ ] { #assignNextIdentifier } #assignNextIdentifier >>

[ ] [ ] { #pushNextOrderToOrderQueue #enterOrderQueue } >> (
#makeNextOrderOrderQueueProof (
[ ] [ ] { #pushNextOrderToOrderQueue #exitOrderQueue } >> )
#makeNextOrderOrderQueueProof )


[ ] [ ] { #enterComment } >> /*
[ ] [ ] { #exitComment } >> */
#makeNextOrderCommentProof */

[ ] [ ] { "
" #clearOrderQueue }  >> ;

[ ] [ ] { #debug } >> debug ;

/*
debug
debug */


[ ] [ ] { #putInFrontFromOrderQueue } >> $ ;


/* swapping */


[ ] [ ] 
{ 
    [ ] [ ] -> second
    ( second )
} >> swap ;

/* ( "1" "2" ) swap

$ $ */

[ ] [ ] {
"global _start

section .text

_start:
"} >> startCode ;

[ ] [ ] { "section .rodata" } >> rodata ;

[ ] [ ] { "mov rax, 60
mov rdi, 0
syscall " } >> exit ;

[ ] [ ]
{
    [ ] [ ] -> message
    [ ] [ ] -> messageLength
    "mov rax, 1
mov rdi, 1
mov rsi, " message
"
mov rdx, " messageLength
"
syscall"
} >> print ;

[ ] [ ] 
{
    [ ] [ ] -> name
    [ ] [ ] -> assignCode
    name ": " assignCode ;
} >> globalVar

/* actually coding */

rodata ;

[ ] [ ] { "wordToGuess" } >> wordToGuess ;
( wordToGuess "db 'moin', 0xa" ) globalVar ;

[ ] [ ] { "wordLength" } >> wordLength ;
( wordLength "equ $ - wordToGuess" ) globalVar ;


startCode ;

( wordToGuess wordLength ) print ;


exit ;

